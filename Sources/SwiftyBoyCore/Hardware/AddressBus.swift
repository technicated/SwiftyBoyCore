//
//  AddressBus.swift
//  SwiftyBoyCore
//
//  Created by technicated
//

struct AddressBus {
 
    static let bootRom: [UInt8] = [
        0x31, 0xFE, 0xFF, 0xAF, 0x21, 0xFF, 0x9F, 0x32, 0xCB, 0x7C, 0x20, 0xFB, 0x21, 0x26, 0xFF, 0x0E,
        0x11, 0x3E, 0x80, 0x32, 0xE2, 0x0C, 0x3E, 0xF3, 0xE2, 0x32, 0x3E, 0x77, 0x77, 0x3E, 0xFC, 0xE0,
        0x47, 0x11, 0x04, 0x01, 0x21, 0x10, 0x80, 0x1A, 0xCD, 0x95, 0x00, 0xCD, 0x96, 0x00, 0x13, 0x7B,
        0xFE, 0x34, 0x20, 0xF3, 0x11, 0xD8, 0x00, 0x06, 0x08, 0x1A, 0x13, 0x22, 0x23, 0x05, 0x20, 0xF9,
        0x3E, 0x19, 0xEA, 0x10, 0x99, 0x21, 0x2F, 0x99, 0x0E, 0x0C, 0x3D, 0x28, 0x08, 0x32, 0x0D, 0x20,
        0xF9, 0x2E, 0x0F, 0x18, 0xF3, 0x67, 0x3E, 0x64, 0x57, 0xE0, 0x42, 0x3E, 0x91, 0xE0, 0x40, 0x04,
        0x1E, 0x02, 0x0E, 0x0C, 0xF0, 0x44, 0xFE, 0x90, 0x20, 0xFA, 0x0D, 0x20, 0xF7, 0x1D, 0x20, 0xF2,
        0x0E, 0x13, 0x24, 0x7C, 0x1E, 0x83, 0xFE, 0x62, 0x28, 0x06, 0x1E, 0xC1, 0xFE, 0x64, 0x20, 0x06,
        0x7B, 0xE2, 0x0C, 0x3E, 0x87, 0xE2, 0xF0, 0x42, 0x90, 0xE0, 0x42, 0x15, 0x20, 0xD2, 0x05, 0x20,
        0x4F, 0x16, 0x20, 0x18, 0xCB, 0x4F, 0x06, 0x04, 0xC5, 0xCB, 0x11, 0x17, 0xC1, 0xCB, 0x11, 0x17,
        0x05, 0x20, 0xF5, 0x22, 0x23, 0x22, 0x23, 0xC9, 0xCE, 0xED, 0x66, 0x66, 0xCC, 0x0D, 0x00, 0x0B,
        0x03, 0x73, 0x00, 0x83, 0x00, 0x0C, 0x00, 0x0D, 0x00, 0x08, 0x11, 0x1F, 0x88, 0x89, 0x00, 0x0E,
        0xDC, 0xCC, 0x6E, 0xE6, 0xDD, 0xDD, 0xD9, 0x99, 0xBB, 0xBB, 0x67, 0x63, 0x6E, 0x0E, 0xEC, 0xCC,
        0xDD, 0xDC, 0x99, 0x9F, 0xBB, 0xB9, 0x33, 0x3E, 0x3C, 0x42, 0xB9, 0xA5, 0xB9, 0xA5, 0x42, 0x3C,
        0x21, 0x04, 0x01, 0x11, 0xA8, 0x00, 0x1A, 0x13, 0xBE, 0x20, 0xFE, 0x23, 0x7D, 0xFE, 0x34, 0x20,
        0xF5, 0x06, 0x19, 0x78, 0x86, 0x23, 0x05, 0x20, 0xFB, 0x86, 0x20, 0xFE, 0x3E, 0x01, 0xE0, 0x50
    ]


    private(set) var instructionLengthInMachineCycles: Int = 0
    
    private var display: Display = Display()
    
    private var bootRom: [UInt8] = AddressBus.bootRom
    
    private var vram: [UInt8] = .init(repeating: 0, count: 0x2000)
    private var wram: [UInt8] = .init(repeating: 0, count: 0x2000)
    private var oam: [UInt8] = .init(repeating: 0, count: 0xA0)
    private var hram: [UInt8] = .init(repeating: 0, count: 0x7F)

}

extension AddressBus {
    
    mutating func machineCycle() {
        instructionLengthInMachineCycles += 1
        
        for _ in 0 ..< 4 {
            display.tick()
        }        
    }
    
    mutating func resetInstructionLength() {
        instructionLengthInMachineCycles = 0
    }
    
    subscript(index: UInt16) -> UInt8 {
        mutating get {
            defer { machineCycle() }

            switch index {
            
            case 0x0000 ... 0x00FF: return bootRom[Int(index)]                
            case 0x0100 ... 0x3FFF: return 0xFF
            case 0x3000 ... 0x7FFF: return 0xFF
            case 0x8000 ... 0x9FFF: return vram[Int(index - 0x8000)]
            case 0xA000 ... 0xBFFF: return 0xFF
            case 0xC000 ... 0xCFFF: return wram[Int(index - 0xC000)]
            case 0xD000 ... 0xDFFF: return wram[Int(index - 0xC000)]
            case 0xE000 ... 0xFDFF: return wram[Int(index - 0xE000)]
            case 0xFE00 ... 0xFE9F: return oam[Int(index - 0xFE00)]
            case 0xFEA0 ... 0xFEFF: return 0x00

            case 0xFF40: return display.lcdc
            case 0xFF41: return display.stat
            case 0xFF42: return display.scy
            case 0xFF43: return display.scx
            case 0xFF44: return display.ly
            case 0xFF45: return display.lyc
            case 0xFF47: return display.bgp
            case 0xFF48: return display.obp0
            case 0xFF49: return display.obp1

            case 0xFF80 ... 0xFFFE: return hram[Int(index - 0xFF80)]
            case 0xFFFF: fatalError("Not implemented")
            default: preconditionFailure()
    
            }
        }
        set {
            defer { machineCycle() }

            switch index {
                
            case 0x0000 ... 0x3FFF: break
            case 0x3000 ... 0x7FFF: break
            case 0x8000 ... 0x9FFF: vram[Int(index - 0x8000)] = newValue
            case 0xA000 ... 0xBFFF: break
            case 0xC000 ... 0xCFFF: wram[Int(index - 0xC000)] = newValue
            case 0xD000 ... 0xDFFF: wram[Int(index - 0xC000)] = newValue
            case 0xE000 ... 0xFDFF: wram[Int(index - 0xE000)] = newValue
            case 0xFE00 ... 0xFE9F: oam[Int(index - 0xFE00)] = newValue
            case 0xFEA0 ... 0xFEFF: break
                
            case 0xFF11: break
            case 0xFF12: break
            case 0xFF13: break
            case 0xFF14: break
            case 0xFF24: break
            case 0xFF25: break
            case 0xFF26: break

            case 0xFF40: display.lcdc = newValue
            case 0xFF41: display.stat = newValue
            case 0xFF42: display.scy = newValue
            case 0xFF43: display.scx = newValue
            case 0xFF44: display.ly = newValue
            case 0xFF45: display.lyc = newValue
            case 0xFF47: display.bgp = newValue
            case 0xFF48: display.obp0 = newValue
            case 0xFF49: display.obp1 = newValue

            case 0xFF80 ... 0xFFFE: hram[Int(index - 0xFF80)] = newValue
            case 0xFFFF: fatalError("Not implemented")
            default: preconditionFailure()
                
            }
        }
    }
    
}
